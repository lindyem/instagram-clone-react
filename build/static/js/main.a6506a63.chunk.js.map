{"version":3,"sources":["firebase.js","components/Posts/Posts.js","components/ImageUpload/ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Posts","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","setCaption","image","setImage","progress","setProgress","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","React","modalStyle","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","setUsername","password","setPassword","email","setEmail","setUser","onAuthStateChanged","authUser","id","Modal","onClose","style","Input","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a6506a63.chunk.js","sourcesContent":["import firebase from \"firebase\";\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyCQ9A5mR0EyW8YHnnTrn58fzxXfyewkrgA\",\n  authDomain: \"instagram-clone-d1536.firebaseapp.com\",\n  databaseURL: \"https://instagram-clone-d1536.firebaseio.com\",\n  projectId: \"instagram-clone-d1536\",\n  storageBucket: \"instagram-clone-d1536.appspot.com\",\n  messagingSenderId: \"573652892805\",\n  appId: \"1:573652892805:web:ead9109aef6b5e4cd73dec\",\n  measurementId: \"G-KT27FKPWTQ\",\n});\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\n\nexport { db, auth, storage };\n","import React, { useState, useEffect } from \"react\";\nimport \"./Posts.css\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { db } from \"../../firebase\";\nimport firebase from 'firebase';\n\nfunction Posts({ postId, user, username, caption, imageUrl }) {\n  const [comments, setComments] = useState([]);\n  const [comment, setComment] = useState(\"\");\n\n  useEffect(() => {\n    let unsubscribe;\n    if (postId) {\n      unsubscribe = db\n        .collection(\"posts\")\n        .doc(postId)\n        .collection(\"comments\")\n        .orderBy('timestamp', 'desc')\n        .onSnapshot((snapshot) => {\n          setComments(snapshot.docs.map((doc) => doc.data()));\n        });\n    }\n    return () => {\n      unsubscribe();\n    };\n  }, [postId]);\n\n  const postComment = (event) => {\n    event.preventDefault();\n\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n      text: comment,\n      username: user.displayName,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    setComment('');\n  };\n\n  return (\n    <div className=\"post\">\n      <div className=\"post__header\">\n        <Avatar\n          className=\"post__avatar\"\n          alt=\"lindyeem\"\n          src=\"/static/images/avatar/1.jpg\"\n        />\n        <h3>{username}</h3>\n      </div>\n\n      <img className=\"post__image\" src={imageUrl} alt=\"\"></img>\n\n      <h4 className=\"post__text\">\n        <strong>{username} </strong>\n        {caption}\n      </h4>\n\n      <div className=\"post__comments\">\n        {comments.map((comment) => (\n          <p>\n            <strong>{comment.username}</strong> {comment.text}\n          </p>\n        ))}\n      </div>\n      {user && (\n        <form className=\"post__commentBox\">\n          <input\n            className=\"post__input\"\n            type=\"text\"\n            placeholder=\"Add a comment...\"\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n          />\n          <button\n            className=\"post__button\"\n            disabled={!comment}\n            type=\"submit\"\n            onClick={postComment}\n          >\n            Post\n          </button>\n        </form>\n      )}\n    </div>\n  );\n}\n\nexport default Posts;\n","import React, { useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport firebase from \"firebase\";\nimport { storage, db } from \"../../firebase\";\nimport './ImageUpload.css';\n\nfunction ImageUpload({ username }) {\n  const [caption, setCaption] = useState(\"\");\n  const [image, setImage] = useState(null);\n  const [progress, setProgress] = useState(0);\n\n  const handleChange = (e) => {\n    if (e.target.files[0]) {\n      setImage(e.target.files[0]);\n    }\n  };\n\n  const handleUpload = () => {\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n    uploadTask.on(\n      \"state_changed\",\n      (snapshot) => {\n        const progress = Math.round(\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n        );\n        setProgress(progress);\n      },\n      (error) => {\n        console.log(error);\n        alert(error.message);\n      },\n      () => {\n        storage\n          .ref(\"images\")\n          .child(image.name)\n          .getDownloadURL()\n          .then((url) => {\n            db.collection(\"posts\").add({\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n              caption: caption,\n              imageUrl: url,\n              username: username,\n            });\n\n            setProgress(0);\n            setCaption(\"\");\n            setImage(null);\n          });\n      }\n    );\n  };\n\n  return (\n    <div className=\"imageupload\">\n\n      <progress className=\"imageupload__progress\" value={progress} max=\"100\" />\n      <input\n        type=\"text\"\n        placeholder=\"enter a caption\"\n        onChange={(event) => setCaption(event.target.value)}\n        value={caption}\n      />\n      <input type=\"file\" onChange={handleChange} />\n      <Button className=\"imageupload__button\" onClick={handleUpload}>\n        Upload\n      </Button>\n    </div>\n  );\n}\n\nexport default ImageUpload;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./components/Posts/Posts\";\nimport { db, auth } from \"./firebase\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Button, Input } from \"@material-ui/core\";\nimport ImageUpload from \"./components/ImageUpload/ImageUpload\";\nimport InstagramEmbed from \"react-instagram-embed\";\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = React.useState(getModalStyle);\n\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        console.log(authUser);\n        setUser(authUser);\n      } else {\n        setUser(null);\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, [user, username]);\n\n  useEffect(() => {\n    db.collection(\"posts\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setPosts(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            posts: doc.data(),\n          }))\n        );\n      });\n  }, []);\n\n  const signUp = (event) => {\n    event.preventDefault();\n\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        return authUser.user.updateProfile({\n          displayName: username,\n        });\n      })\n      .catch((error) => error.message);\n  };\n\n  const signIn = (event) => {\n    event.preventDefault();\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n\n    setOpenSignIn(false);\n  };\n  return (\n    <div className=\"app\">\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo-2x.png/1b47f9d0e595.png\"\n                alt=\"\"\n              />\n            </center>\n            <Input\n              type=\"text\"\n              placeholder=\"username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button onClick={signUp}>Sign Up</Button>\n          </form>\n        </div>\n      </Modal>\n\n      <Modal open={openSignIn} onClose={() => setOpenSignIn(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo-2x.png/1b47f9d0e595.png\"\n                alt=\"\"\n              />\n            </center>\n\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button type=\"submit\" onClick={signIn}>\n              Sign In\n            </Button>\n          </form>\n        </div>\n      </Modal>\n\n      <div className=\"app__header\">\n        <img\n          className=\"app__headerImage\"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo-2x.png/1b47f9d0e595.png\"\n          alt=\"\"\n        />\n        {user ? (\n          <Button onClick={() => auth.signOut()}>Sign out</Button>\n        ) : (\n          <div className=\"app__loginContainer\">\n            <Button onClick={() => setOpenSignIn(true)}>Sign In</Button>\n            <Button onClick={() => setOpen(true)}>Sign up</Button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"app__posts\">\n        <div className=\"app__postsLeft\">\n          {posts.map(({ id, posts }) => (\n            <Post\n              postId={id}\n              user={user}\n              key={id}\n              username={posts.username}\n              caption={posts.caption}\n              imageUrl={posts.imageUrl}\n            />\n          ))}\n        </div>\n        <div className=\"app__postsRight\">\n          <InstagramEmbed\n            url=\"https://www.instagram.com/p/CEm4k16Mpsm/\"\n            maxWidth={320}\n            hideCaption={false}\n            containerTagName=\"div\"\n            protocol=\"\"\n            injectScript\n            onLoading={() => {}}\n            onSuccess={() => {}}\n            onAfterRender={() => {}}\n            onFailure={() => {}}\n          />\n        </div>\n      </div>\n\n      {user?.displayName ? (\n        <ImageUpload username={user.displayName} />\n      ) : (\n        <h3>Sorry you need to login.</h3>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}